- name: Configure gocd repo
  become: yes
  copy:
    dest: /etc/yum.repos.d/gocd.repo
    src: gocd.repo
    owner: root
    group: root
    mode: 0444

- name: Create go group
  become: yes
  group:
    name: go
    gid: "{{ gogid }}"
    system: yes
    
- name: Create go user
  become: yes
  user:
    name: go
    comment: GoCD User
    uid: "{{ gouid }}"
    group: go
    shell: /bin/bash
    home: /var/go
    create_home: yes

- name: Setup data directory
  become: yes
  file:
    path: "{{ item }}"
    owner: go
    group: go
    mode: 0750
    state: directory
  with_items:
    - /data
    - /data/var-log-go-server
    - /data/var-lib-go-server

- name: Create symlinks
  become: yes
  file:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    force: yes
    state: link
    owner: go
    group: go
  with_items:
    - {'src': '/data/var-lib-go-server', 'path': '/var/lib/go-server' }
    - {'src': '/data/var-log-go-server', 'path': '/var/log/go-server' }

- name: Install required packages
  become: yes
  package:
    name: 
      - git
      - python-lxml
      - python-requests
      - httpd-tools
      - go-server-20.3.0-11530

- name: Generating password file contents for admin user
  become: yes
  become_user: go
  command: "htpasswd -Bb -c /etc/go/.passwd {{ adminUsername }} {{ adminPassword }}"

- name: Copy post back up script
  become: yes
  copy:
    dest: '/usr/local/bin/gocd_post_backup.sh'
    src: 'gocd_post_backup.sh'
    owner: go
    group: go
    mode: '0750'

- name: Start gocd server
  include_tasks: restart.yml
  vars:
    state: started

- name: Add auto-registration key
  become: yes
  xml:
    path: "/etc/go/cruise-config.xml"
    xpath: "/cruise/server"
    attribute: "agentAutoRegisterKey"
    value: "{{ agentAutoRegisterKey }}"

- name: Create passwordfile authorisation
  become: yes
  gocd_api:
    domain: "http://localhost:8153"
    config_type: 'authorization'
    entity_id: 'admin'
    username: "{{ adminUsername }}"
    password: "{{ adminPassword }}"
    data:
      id: "admin"
      plugin_id: "cd.go.authentication.passwordfile"
      allow_only_known_users_to_login: false
      properties:
        - key: "PasswordFilePath"
          value: "/etc/go/.passwd"
    state: present

- name: Configure artifacts
  become: yes
  gocd_api:
    domain: "http://localhost:8153"
    config_type: 'artifacts'
    username: "{{ adminUsername }}"
    password: "{{ adminPassword }}"
    data:
      artifacts_dir: "artifacts"
      purge_settings:
        purge_start_disk_space: 2.0
        purge_upto_disk_space: 2.0

- name: Configure backup
  become: yes
  gocd_api:
    domain: "http://localhost:8153"
    config_type: 'backup'
    username: "{{ adminUsername }}"
    password: "{{ adminPassword }}"
    data:
      email_on_failure: false
      email_on_success: false
      post_backup_script: "/usr/local/bin/gocd_post_backup.sh"
      schedule: "0 0 2 * * ?"

- name: Configure default job timeout
  become: yes
  gocd_api:
    domain: "http://localhost:8153"
    config_type: 'backup'
    username: "{{ adminUsername }}"
    password: "{{ adminPassword }}"
    data:
      default_job_timeout: "15"

- name: Configure pipeline-groups
  become: yes
  gocd_api:
    domain: "http://localhost:8153"
    config_type: 'pipeline_group'
    entity_id: "Test"
    username: "{{ adminUsername }}"
    password: "{{ adminPassword }}"
    data:
      name: "Test"
      authorization:
        admins:
          users:
            - "{{ adminUsername }}"

#- include: nginx.yml